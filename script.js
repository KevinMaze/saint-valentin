// const x = Math.min(
//     Math.max(10, 60 + radius * Math.cos(angle * (Math.PI / 180))),
//     90
// ); // Position x
// const y = Math.min(
//     Math.max(10, 60 + radius * Math.sin(angle * (Math.PI / 180))),
//     90
// );


document.addEventListener("DOMContentLoaded", () => {
    const audio = new Audio("./Louis Armstrong.mp3");
    const timer = document.getElementById("timer");
    // const musicTitle = document.getElementById("music-title");
    // const volumeSlider = document.getElementById("volume-slider");
    // const volumeDown = document.getElementById("volume-down");
    // const volumeUp = document.getElementById("volume-up");

    let isPlaying = false;

      // Fonction pour formater le temps en minutes:secondes
    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60).toString().padStart(2, "0");
        return `${minutes}:${secs}`;
    }

      // Met √† jour le timer de la musique
    function updateTimer() {
        timer.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;
    }

    function changeState(action) {
    const btns = document.querySelectorAll(".btn");

    // R√©initialise les boutons actifs
    btns.forEach((btn) => btn.classList.remove("active"));

    // Ex√©cute l'action selon le bouton cliqu√©
    if (action === "play") {
        if (!isPlaying) {
        audio.play();
        isPlaying = true;
        }
    } else if (action === "pause") {
        audio.pause();
        isPlaying = false;
    } else if (action === "stop") {
        audio.pause();
        audio.currentTime = 0;
        isPlaying = false;
    }

      // Met √† jour le volume
    // function setVolume(value) {
    //     audio.volume = Math.min(Math.max(value, 0), 1); // Garde la valeur entre 0 et 1
    //     volumeSlider.value = audio.volume;
    // }

    // Ajoute la classe active au bouton correspondant
    const activeBtn = document.querySelector(`.btn[data-action="${action}"]`);
    if (activeBtn) activeBtn.classList.add("active");
    }

        // Ajoute les √©v√©nements aux boutons
        document.querySelectorAll(".btn").forEach((btn) => {
        btn.addEventListener("click", () => {
            const action = btn.getAttribute("data-action");
            changeState(action);
        });
    });

      // √âv√©nements de contr√¥le du volume
    // volumeSlider.addEventListener("input", () => setVolume(volumeSlider.value));
    // volumeDown.addEventListener("click", () => setVolume(audio.volume - 0.1));
    // volumeUp.addEventListener("click", () => setVolume(audio.volume + 0.1));

    // Met √† jour le timer toutes les secondes
    audio.addEventListener("timeupdate", updateTimer);

    // Affiche la dur√©e totale lorsque le fichier est charg√©
    audio.addEventListener("loadedmetadata", () => {
        timer.textContent = `00:00 / ${formatTime(audio.duration)}`;
    });

    // R√©initialise les √©tats √† la fin de la musique
    audio.addEventListener("ended", () => {
        changeState("stop");
    });

    let cursor = document.querySelector(".cursor");

    document.addEventListener("mousemove", (e) => {
        cursor.style.left = e.clientX + "px";
        cursor.style.top = e.clientY + "px";
    });

    const words = [
        "mon amour",
        "my love",
        "mein Schatz",
        "mi amor",
        "amore mio",
        "mo ghr√°",
        "min √§lskling",
        "moya lyubov",
        "min elskede",
        "minha amada",
        "ÊÑõ„Åô„Çã‰∫∫",
        "ÏÇ¨ÎûëÌïòÎäî ÏÇ¨Îûå",
        "min k√§rlek",
        "min elskling",
        "moja ljubav",
        "meine Liebe",
        "mi querida",
        "az √©n szerelmem",
        "m√¥j milovan√Ω",
        "miluji tƒõ",
        "m≈Øj mil√°ƒçek",
        "la mia amata",
        "mijn lief",
        "min √§lskade",
        "min kj√¶re",
        "min √°stin",
        "min k√¶rlighed",
        "mou agapi",
        "moja l√°ska",
        "moja ljubavi",
        "mijn schat",
        "mƒ´ƒºotais",
        "miluju tƒõ",
        "mily kras√°vec",
        "mein Liebling",
        "mi cielo",
        "mio amore",
        "mƒ´lestƒ´ba",
        "min dragoste",
        "mi amada",
        "mana mƒ´lestƒ´ba",
    ];

    const maxWords = 20; // Limite du nombre de mots √† afficher en m√™me temps
    const activeWords = []; // Stocke les mots actuellement affich√©s

    function checkOverlap(x, y, width, height) {
        // V√©rifie si le nouveau mot entre en collision avec un mot existant
        return activeWords.some((word) => {
        return !(
            x + width < word.x || // Trop √† gauche
            x > word.x + word.width || // Trop √† droite
            y + height < word.y || // Trop en haut
            y > word.y + word.height // Trop en bas
        );
        });
    }

    function createWord() {
    if (activeWords.length >= maxWords) {
        // Supprime le mot le plus ancien pour limiter la surcharge
        const oldWord = activeWords.shift();
        oldWord.remove();
    }

    const word = words[Math.floor(Math.random() * words.length)];
    const span = document.createElement("span");
    span.textContent = word;
    span.className = "word";

    let x, y;
    let attempts = 0;
    const maxAttempts = 50; // Limite pour √©viter une boucle infinie
    do {
        const angle = Math.random() * 360;
        const radius = Math.random() * 200 + 150; // Distance du centre
        x = Math.min( Math.max(10, 50 + radius * Math.cos(angle * (Math.PI / 180))), 90);
        y = Math.min( Math.max(10, 50 + radius * Math.sin(angle * (Math.PI / 180))), 90);

      // Calcule les dimensions du mot pour √©viter les chevauchements
    const fontSize = Math.random() * 16 + 14;
    span.style.fontSize = fontSize + "px";
    document.body.appendChild(span); // Ajout temporaire pour mesurer
    const { offsetWidth: width, offsetHeight: height } = span;
    span.remove(); // Supprime temporairement pour recalculer si n√©cessaire

    if (!checkOverlap(x, y, width, height)) {
        // Si pas de chevauchement, on valide la position
        span.style.top = `calc(${y}% - ${height / 2}px)`;
        span.style.left = `calc(${x}% - ${width / 2}px)`;
        document.body.appendChild(span); // R√©ajout final au DOM
        activeWords.push({ element: span, x, y, width, height });
        break;
    }

    attempts++;
    } while (attempts < maxAttempts);

    // Si on atteint la limite d'essais, on n'ajoute pas le mot
    if (attempts >= maxAttempts) return;

    // Apparition progressive
    span.style.opacity = "1";

    // Suppression apr√®s 6 secondes
    setTimeout(() => {
    span.style.opacity = "0";
    setTimeout(() => {
        span.remove();
        const index = activeWords.findIndex((w) => w.element === span);
        if (index !== -1) activeWords.splice(index, 1);
    }, 1000); // Attends que l'animation d'opacit√© soit termin√©e
    }, 7000); // Dur√©e d'affichage du mot
}

function startWords() {
    setInterval(createWord, 1000); // Cr√©e un mot toutes les secondes
}

  startWords(); // D√©marre l'affichage dynamique des mots

function showHeart() {
    const heart = document.getElementById("heart");
    heart.style.transform = "translate(-50%, -50%) scale(1)";
    heart.addEventListener("click", () => {
        setInterval(fallHeart, 300);
        heart.classList.add("clicked");
        setTimeout(() => {
            document.getElementById("message").style.display = "block";
        }, 300);
    });
}

// Apparition du c≈ìur
setTimeout(showHeart, 2000);
// generateWords();
});

const fallHeart = () => {
    const coeur = document.createElement("div");

    coeur.classList.add("coeur");
    coeur.innerHTML = "üíñ";
    coeur.style.left = Math.random() * 100 + "vw";
    coeur.style.animationDuration = Math.random() * 2 + 3 + "s";
    document.body.appendChild(coeur);

    setTimeout(() => {
        coeur.remove();
    }, 5000);
};
// setInterval(fallHeart, 300);


function changeState() {
    let btns = document.querySelectorAll(".btn");
    let audio = new Audio("./Louis Armstrong.mp3");
    // let audio = document.getElementById("#audio");
    for (let i = 0; i < btns.length; i++) {
        btns[i].classList.remove("active");
    }
    btns[x].classList.add("active");

    if(x == 0){
        audio.play();
    }
    if(x == 1){
        audio.pause();
    }
    if(x == 2){
        audio.pause();
        audio.currentTime = 0;
    }
}

